#!/usr/bin/python3

# Example usage :
#
# Registry creation
#
# juju run-action kubernetes-worker/0 registry domain=myregistry.internal \
# htpasswd="$(cat htpasswd)" ingress=true \
# tlscert="$(cat registry.crt)" tlskey="$(cat registry.key)"
#
# Registry deletion
#
# juju run-action kubernetes-worker/0 registry delete=true ingress=true

import sys
import os

from base64 import b64encode

from charmhelpers.core.hookenv import action_get
from charmhelpers.core.hookenv import action_set
from charmhelpers.core.hookenv import unit_public_ip
from charms.templating.jinja2 import render
from subprocess import call


deletion = action_get('delete')

context = {}

# List of config options we need to b64encode, as the registry image provided
# by Google only accepts b64encoded values
b64_params = ('tlscert', 'tlskey', 'htpasswd')

# These config options must be defined in the case of a creation
param_error = False
for param in ('tlscert', 'tlskey', 'domain', 'htpasswd'):
    value = action_get(param)
    if not value and not deletion:
        key = "registry-create-parameter-{}".format(param)
        error = "failure, parameter {} is required".format(param)
        action_set({key: error})
        param_error = True

    if param in b64_params:
        value = b64encode(value.encode())

    context[param] = value

if param_error:
    sys.exit(0)

# This one is either true or false, no need to check if it has a "good" value.
context['ingress'] = action_get('ingress')

# Declare a kubectl template when invoking kubectl
kubectl = ['kubectl', '--kubeconfig=/srv/kubernetes/config']

# Remove deployment if requested
if deletion:
    resources = ['svc/kube-registry', 'rc/kube-registry-v0', 'secrets/registry-tls-data',
                 'secrets/registry-auth-data']

    if action_get('ingress'):
        resources.append('ing/registry-ing')

    delete_command = kubectl + ['delete'] + resources
    delete_response = call(delete_command)
    if delete_response == 0:
        action_set({'registry-delete': 'success'})
    else:
        action_set({'registry-delete': 'failure'})

    sys.exit(0)

# Creation request
render('registry.yaml', '/etc/kubernetes/addons/registry.yaml',
       context)

create_command = kubectl + ['create', '-f',
                            '/etc/kubernetes/addons/registry.yaml']

create_response = call(create_command)

if create_response == 0:
    action_set({'registry-create': 'success'})
else:
    action_set({'registry-create': 'failure'})
